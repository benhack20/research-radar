"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import {
  Search,
  Filter,
  Download,
  Plus,
  Edit,
  Trash2,
  FileText,
  Award,
  Calendar,
  Users,
  ExternalLink,
  Brain,
  Quote,
  Globe,
  Building,
  Hash,
  Clock,
  CheckCircle,
} from "lucide-react"
import Link from "next/link"
import type { Paper, Patent } from "../types/api-types"

export default function ResearchPage() {
  const [activeTab, setActiveTab] = useState("papers")
  const [papers, setPapers] = useState<Paper[]>([])
  const [patents, setPatents] = useState<Patent[]>([])
  const [filteredPapers, setFilteredPapers] = useState<Paper[]>([])
  const [filteredPatents, setFilteredPatents] = useState<Patent[]>([])
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedYear, setSelectedYear] = useState<string>("all")
  const [selectedAuthor, setSelectedAuthor] = useState<string>("all")
  const [selectedSource, setSelectedSource] = useState<string>("all")
  const [selectedStatus, setSelectedStatus] = useState<string>("all")
  const [selectedCountry, setSelectedCountry] = useState<string>("all")
  const [citationRange, setCitationRange] = useState<[number, number]>([0, 1000])

  // 模拟真实数据
  useEffect(() => {
    const mockPapers: Paper[] = [
      {
        id: "682be5de163c01c850f6050e",
        title: "AR Secretary Agent: Real-time Memory Augmentation Via LLM-powered Augmented Reality Glasses",
        abstract:
          "Interacting with a significant number of individuals on a daily basis is commonplace for many professionals, which can lead to challenges in recalling specific details: Who is this person? What did we talk about last time? The advent of augmented reality (AR) glasses, equipped with visual and auditory data capture capabilities, presents a solution. In our work, we implemented an AR Secretary Agent with advanced Large Language Models (LLMs) and Computer Vision technologies.",
        authors: [
          { name: "Raphaël A. El Haddad" },
          { id: "6325a348f5ee9683ec776828", name: "Zeyu Wang" },
          { name: "Yeonsu Shin" },
          { name: "Ranyi Liu" },
          { id: "560cbb3845cedb33975687e5", name: "Yuntao Wang" },
          { id: "56066a5245cedb339687488b", name: "Chun Yu" },
        ],
        year: 2025,
        num_citation: 0,
        pdf: "https://cz5waila03cyo0tux1owpyofgoryroob.aminer.cn/FA/95/A9/FA95A9183DA53A75353AB4FFD233C029.pdf",
        urls: ["https://www.alphaxiv.org/abs/2505.11888"],
        lang: "en",
        create_time: "2025-05-20T11:05:15.547Z",
        update_times: {
          u_a_t: "2025-07-22T17:43:43.092Z",
          u_v_t: "2025-07-22T17:43:43.092Z",
        },
        versions: [
          { id: "687a326a163c01c850a6aef6", sid: "2505.11888", src: "alphaxiv", year: 2025 },
          { id: "682be5de163c01c850f6050e", sid: "2505.11888", src: "arxiv", year: 2025 },
        ],
      },
    ]

    const mockPatents: Patent[] = [
      {
        id: "67a734db9781ce1a6aa43660",
        title: {
          zh: ["一种智能戒指交互方法、装置及电子设备"],
          en: [
            "Intelligent ring interaction method for use in intelligent wearing device i.e. intelligent hand ring, involves inputting touch gesture and touch sound generated by touch gesture into algorithm processing module",
          ],
        },
        abstract: {
          zh: [
            "本发明提供了一种智能戒指交互方法、装置及电子设备，智能戒指穿戴于手指的食指上，所述智能戒指包括：IMU传感器、声音传感器和算法处理模块；所述方法，包括：通过所述智能戒指的IMU传感器获取所述手指执行的触碰手势；通过所述声音传感器采集所述手指执行所述触碰手势时发出的触碰声音；将所述触碰手势和所述触碰手势产生的所述触碰声音输入所述算法处理模块中，利用所述算法处理模块对所述手指触碰的物体表面进行识别。",
          ],
          en: [
            "The method involves obtaining the touch gesture executed by the finger through the inertial measurement unit (IMU) sensor of the intelligent ring. The touch sound generated is collected when the finger executes the touch gesture.",
          ],
        },
        appDate: "2024-09-05T00:00:00Z",
        pubDate: "2024-11-26T00:00:00Z",
        appNum: "202411244374",
        pubNum: "119024969",
        pubSearchId: "CN119024969A",
        pubKind: "A",
        country: "CN",
        inventor: [
          { name: "史元春", personId: "6501a7a121d92e25912f986a" },
          { name: "喻纯", personId: "56066a5245cedb339687488b" },
          { name: "何哲" },
        ],
        applicant: [
          {
            name: "清华大学",
            orgId: "5f71b2881c455f439fe3c860",
            addressInfo: { raw: "100084 北京市海淀区清华园" },
          },
        ],
        assignee: [{ name: "UNIV TSINGHUA (UYQI-C)", orgId: "5f71b2881c455f439fe3c860" }],
        ipc: [
          { l1: "G", l2: "G06", l3: "G06F", l4: "G06F003/01" },
          { l1: "G", l2: "G06", l3: "G06F", l4: "G06F003/16" },
        ],
        priority: [{ num: "11244374" }],
      },
    ]

    setPapers(mockPapers)
    setPatents(mockPatents)
    setFilteredPapers(mockPapers)
    setFilteredPatents(mockPatents)
  }, [])

  // 筛选逻辑
  useEffect(() => {
    if (activeTab === "papers") {
      const filtered = papers.filter((paper) => {
        const matchesSearch =
          paper.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
          paper.authors.some((author) => author.name.toLowerCase().includes(searchTerm.toLowerCase())) ||
          paper.abstract.toLowerCase().includes(searchTerm.toLowerCase())

        const matchesYear = selectedYear === "all" || paper.year.toString() === selectedYear
        const matchesAuthor = selectedAuthor === "all" || paper.authors.some((author) => author.name === selectedAuthor)
        const matchesSource =
          selectedSource === "all" ||
          (paper.versions && paper.versions.some((version) => version.src === selectedSource))
        const matchesCitations = paper.num_citation >= citationRange[0] && paper.num_citation <= citationRange[1]

        return matchesSearch && matchesYear && matchesAuthor && matchesSource && matchesCitations
      })
      setFilteredPapers(filtered)
    } else {
      const filtered = patents.filter((patent) => {
        const titleText = patent.title.zh?.[0] || patent.title.en?.[0] || ""
        const abstractText = patent.abstract.zh?.[0] || patent.abstract.en?.[0] || ""

        const matchesSearch =
          titleText.toLowerCase().includes(searchTerm.toLowerCase()) ||
          patent.inventor.some((inventor) => inventor.name.toLowerCase().includes(searchTerm.toLowerCase())) ||
          abstractText.toLowerCase().includes(searchTerm.toLowerCase())

        const matchesCountry = selectedCountry === "all" || patent.country === selectedCountry

        // 根据发布状态判断专利状态
        const patentStatus = patent.pubDate ? "published" : "pending"
        const matchesStatus = selectedStatus === "all" || patentStatus === selectedStatus

        return matchesSearch && matchesCountry && matchesStatus
      })
      setFilteredPatents(filtered)
    }
  }, [
    papers,
    patents,
    searchTerm,
    selectedYear,
    selectedAuthor,
    selectedSource,
    selectedStatus,
    selectedCountry,
    citationRange,
    activeTab,
  ])

  const exportData = () => {
    console.log("Exporting research data...")
  }

  const handleEdit = (item: Paper | Patent) => {
    console.log("Editing item:", item.id)
  }

  const handleDelete = (id: string) => {
    if (activeTab === "papers") {
      setPapers(papers.filter((p) => p.id !== id))
    } else {
      setPatents(patents.filter((p) => p.id !== id))
    }
  }

  const uniqueYears = Array.from(new Set(papers.map((p) => p.year.toString())))
    .sort()
    .reverse()
  const uniqueAuthors = Array.from(new Set(papers.flatMap((p) => p.authors.map((a) => a.name))))
  const uniqueSources = Array.from(new Set(papers.flatMap((p) => p.versions?.map((v) => v.src) || []))).filter(Boolean)

  const getPatentStatusIcon = (patent: Patent) => {
    if (patent.pubDate) {
      return <CheckCircle className="h-4 w-4 text-green-600" />
    }
    return <Clock className="h-4 w-4 text-yellow-600" />
  }

  const getPatentStatusText = (patent: Patent) => {
    return patent.pubDate ? "已公开" : "申请中"
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("zh-CN")
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
              <Link href="/" className="text-sm text-gray-500 hover:text-gray-700">
                首页
              </Link>
              <span className="text-gray-300">/</span>
              <h1 className="text-xl font-semibold text-gray-900">论文专利检索</h1>
            </div>
            <div className="flex items-center space-x-3">
              <Button onClick={exportData} variant="outline" size="sm">
                <Download className="h-4 w-4 mr-2" />
                导出数据
              </Button>
              <Dialog>
                <DialogTrigger asChild>
                  <Button size="sm">
                    <Plus className="h-4 w-4 mr-2" />
                    批量拉取
                  </Button>
                </DialogTrigger>
                <DialogContent className="sm:max-w-md">
                  <DialogHeader>
                    <DialogTitle>批量拉取数据</DialogTitle>
                    <DialogDescription>通过AMiner API批量拉取学者的论文和专利数据</DialogDescription>
                  </DialogHeader>
                  <div className="space-y-4">
                    <div>
                      <label className="text-sm font-medium mb-2 block">学者ID</label>
                      <Input placeholder="输入AMiner学者ID" />
                    </div>
                    <div>
                      <label className="text-sm font-medium mb-2 block">时间范围</label>
                      <div className="flex space-x-2">
                        <Input type="date" />
                        <Input type="date" />
                      </div>
                    </div>
                    <Button className="w-full">开始拉取</Button>
                  </div>
                </DialogContent>
              </Dialog>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        {/* 筛选区域 */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center">
              <Filter className="h-5 w-5 mr-2" />
              筛选条件
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <div>
                <label className="text-sm font-medium mb-2 block">搜索</label>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <Input
                    placeholder="标题、作者、摘要..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>

              {activeTab === "papers" ? (
                <>
                  <div>
                    <label className="text-sm font-medium mb-2 block">年份</label>
                    <Select value={selectedYear} onValueChange={setSelectedYear}>
                      <SelectTrigger>
                        <SelectValue placeholder="选择年份" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">全部年份</SelectItem>
                        {uniqueYears.map((year) => (
                          <SelectItem key={year} value={year}>
                            {year}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <label className="text-sm font-medium mb-2 block">作者</label>
                    <Select value={selectedAuthor} onValueChange={setSelectedAuthor}>
                      <SelectTrigger>
                        <SelectValue placeholder="选择作者" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">全部作者</SelectItem>
                        {uniqueAuthors.slice(0, 20).map((author) => (
                          <SelectItem key={author} value={author}>
                            {author}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <label className="text-sm font-medium mb-2 block">数据源</label>
                    <Select value={selectedSource} onValueChange={setSelectedSource}>
                      <SelectTrigger>
                        <SelectValue placeholder="选择数据源" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">全部数据源</SelectItem>
                        {uniqueSources.map((source) => (
                          <SelectItem key={source} value={source}>
                            {source}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </>
              ) : (
                <>
                  <div>
                    <label className="text-sm font-medium mb-2 block">国家/地区</label>
                    <Select value={selectedCountry} onValueChange={setSelectedCountry}>
                      <SelectTrigger>
                        <SelectValue placeholder="选择国家" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">全部国家</SelectItem>
                        <SelectItem value="CN">中国</SelectItem>
                        <SelectItem value="US">美国</SelectItem>
                        <SelectItem value="JP">日本</SelectItem>
                        <SelectItem value="KR">韩国</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <label className="text-sm font-medium mb-2 block">状态</label>
                    <Select value={selectedStatus} onValueChange={setSelectedStatus}>
                      <SelectTrigger>
                        <SelectValue placeholder="选择状态" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">全部状态</SelectItem>
                        <SelectItem value="pending">申请中</SelectItem>
                        <SelectItem value="published">已公开</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </>
              )}
            </div>

            {activeTab === "papers" && (
              <div className="mt-4">
                <label className="text-sm font-medium mb-2 block">引用数范围</label>
                <div className="flex items-center space-x-2">
                  <Input
                    type="number"
                    placeholder="最小值"
                    value={citationRange[0]}
                    onChange={(e) => setCitationRange([Number.parseInt(e.target.value) || 0, citationRange[1]])}
                    className="w-24"
                  />
                  <span>-</span>
                  <Input
                    type="number"
                    placeholder="最大值"
                    value={citationRange[1]}
                    onChange={(e) => setCitationRange([citationRange[0], Number.parseInt(e.target.value) || 1000])}
                    className="w-24"
                  />
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        {/* 主要内容区域 */}
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <div className="flex justify-between items-center mb-6">
            <TabsList>
              <TabsTrigger value="papers" className="flex items-center">
                <FileText className="h-4 w-4 mr-2" />
                论文 ({filteredPapers.length})
              </TabsTrigger>
              <TabsTrigger value="patents" className="flex items-center">
                <Award className="h-4 w-4 mr-2" />
                专利 ({filteredPatents.length})
              </TabsTrigger>
            </TabsList>
          </div>

          <TabsContent value="papers">
            <div className="space-y-6">
              {filteredPapers.map((paper) => (
                <Card key={paper.id} className="hover:shadow-md transition-shadow">
                  <CardHeader>
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <CardTitle className="text-lg mb-3 leading-tight">{paper.title}</CardTitle>
                        <div className="flex flex-wrap items-center gap-4 text-sm text-gray-600 mb-3">
                          <div className="flex items-center">
                            <Users className="h-4 w-4 mr-1" />
                            <span className="truncate max-w-md">
                              {paper.authors.map((author) => author.name).join(", ")}
                            </span>
                          </div>
                          <div className="flex items-center">
                            <Calendar className="h-4 w-4 mr-1" />
                            {paper.year}
                          </div>
                          <div className="flex items-center">
                            <Quote className="h-4 w-4 mr-1" />
                            {paper.num_citation} 引用
                          </div>
                          <div className="flex items-center">
                            <Globe className="h-4 w-4 mr-1" />
                            {paper.lang.toUpperCase()}
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2 ml-4">
                        <Button variant="ghost" size="sm" className="text-blue-600 hover:text-blue-700">
                          <Brain className="h-4 w-4 mr-1" />
                          AI分析
                        </Button>
                        <Button variant="ghost" size="sm" onClick={() => handleEdit(paper)}>
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleDelete(paper.id)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {/* 数据源版本 */}
                      {paper.versions && paper.versions.length > 0 && (
                        <div className="flex flex-wrap gap-2">
                          {paper.versions.map((version, index) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {version.src}
                              {version.sid && <span className="ml-1">({version.sid})</span>}
                            </Badge>
                          ))}
                        </div>
                      )}

                      {/* 摘要 */}
                      <p className="text-sm text-gray-700 leading-relaxed line-clamp-4">{paper.abstract}</p>

                      {/* 操作按钮 */}
                      <div className="flex items-center justify-between pt-2 border-t">
                        <div className="flex items-center space-x-2 text-xs text-gray-500">
                          <span>创建: {formatDate(paper.create_time)}</span>
                          <span>•</span>
                          <span>更新: {formatDate(paper.update_times.u_a_t)}</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          {paper.pdf && (
                            <Button variant="outline" size="sm" asChild>
                              <a href={paper.pdf} target="_blank" rel="noopener noreferrer">
                                <FileText className="h-4 w-4 mr-1" />
                                PDF
                              </a>
                            </Button>
                          )}
                          {paper.urls && paper.urls[0] && (
                            <Button variant="outline" size="sm" asChild>
                              <a href={paper.urls[0]} target="_blank" rel="noopener noreferrer">
                                <ExternalLink className="h-4 w-4 mr-1" />
                                原文
                              </a>
                            </Button>
                          )}
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="patents">
            <div className="space-y-6">
              {filteredPatents.map((patent) => (
                <Card key={patent.id} className="hover:shadow-md transition-shadow">
                  <CardHeader>
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <CardTitle className="text-lg mb-3 leading-tight">
                          {patent.title.zh?.[0] || patent.title.en?.[0]}
                        </CardTitle>
                        <div className="flex flex-wrap items-center gap-4 text-sm text-gray-600 mb-3">
                          <div className="flex items-center">
                            <Users className="h-4 w-4 mr-1" />
                            <span className="truncate max-w-md">
                              {patent.inventor.map((inv) => inv.name).join(", ")}
                            </span>
                          </div>
                          <div className="flex items-center">
                            <Calendar className="h-4 w-4 mr-1" />
                            申请: {formatDate(patent.appDate)}
                          </div>
                          {patent.pubDate && (
                            <div className="flex items-center">
                              <Calendar className="h-4 w-4 mr-1" />
                              公开: {formatDate(patent.pubDate)}
                            </div>
                          )}
                          <div className="flex items-center">
                            <Globe className="h-4 w-4 mr-1" />
                            {patent.country}
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2 ml-4">
                        <div className="flex items-center">
                          {getPatentStatusIcon(patent)}
                          <span className="ml-1 text-sm">{getPatentStatusText(patent)}</span>
                        </div>
                        <Button variant="ghost" size="sm" className="text-blue-600 hover:text-blue-700">
                          <Brain className="h-4 w-4 mr-1" />
                          AI分析
                        </Button>
                        <Button variant="ghost" size="sm" onClick={() => handleEdit(patent)}>
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleDelete(patent.id)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {/* 专利号和申请信息 */}
                      <div className="flex flex-wrap gap-4 text-sm">
                        {patent.appNum && (
                          <div className="flex items-center">
                            <Hash className="h-4 w-4 mr-1 text-gray-400" />
                            <span className="font-mono">申请号: {patent.appNum}</span>
                          </div>
                        )}
                        {patent.pubNum && (
                          <div className="flex items-center">
                            <Hash className="h-4 w-4 mr-1 text-gray-400" />
                            <span className="font-mono">公开号: {patent.pubNum}</span>
                          </div>
                        )}
                        {patent.pubSearchId && (
                          <div className="flex items-center">
                            <Hash className="h-4 w-4 mr-1 text-gray-400" />
                            <span className="font-mono">{patent.pubSearchId}</span>
                          </div>
                        )}
                      </div>

                      {/* 申请人信息 */}
                      <div className="flex items-center text-sm text-gray-600">
                        <Building className="h-4 w-4 mr-1" />
                        <span>申请人: {patent.applicant.map((app) => app.name).join(", ")}</span>
                      </div>

                      {/* IPC分类 */}
                      {patent.ipc && patent.ipc.length > 0 && (
                        <div className="flex flex-wrap gap-1">
                          {patent.ipc.map((ipc, index) => (
                            <Badge key={index} variant="secondary" className="text-xs font-mono">
                              {ipc.l4}
                            </Badge>
                          ))}
                        </div>
                      )}

                      {/* 摘要 */}
                      <p className="text-sm text-gray-700 leading-relaxed line-clamp-4">
                        {patent.abstract.zh?.[0] || patent.abstract.en?.[0]}
                      </p>

                      {/* 优先权信息 */}
                      {patent.priority && patent.priority.length > 0 && (
                        <div className="text-xs text-gray-500">
                          优先权: {patent.priority.map((p) => p.num).join(", ")}
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>

        {/* 空状态 */}
        {((activeTab === "papers" && filteredPapers.length === 0) ||
          (activeTab === "patents" && filteredPatents.length === 0)) && (
          <div className="text-center py-12">
            {activeTab === "papers" ? (
              <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            ) : (
              <Award className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            )}
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              未找到匹配的{activeTab === "papers" ? "论文" : "专利"}
            </h3>
            <p className="text-gray-500 mb-4">请尝试调整筛选条件或搜索关键词</p>
            <Button>
              <Plus className="h-4 w-4 mr-2" />
              批量拉取数据
            </Button>
          </div>
        )}
      </div>
    </div>
  )
}
