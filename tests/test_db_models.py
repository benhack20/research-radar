import sys
import os
import json
import pytest
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, clear_mappers
from sqlalchemy.exc import IntegrityError


from backend.app.persistence.models import Base, Scholar, Paper, Patent, SyncLog

DATABASE_URL = "sqlite:///:memory:"

@pytest.fixture(scope="function")
def db_session():
    """
    创建一个新的数据库会话用于每个测试函数。
    """
    engine = create_engine(DATABASE_URL)
    Base.metadata.create_all(engine)
    Session = sessionmaker(bind=engine)
    session = Session()
    yield session
    session.close()

# ------------------ 学者模型测试 ------------------
def test_create_scholar(db_session):
    """
    测试学者的新增功能。
    """
    scholar = Scholar(name="张三", org="清华大学", aminer_id="A123")
    db_session.add(scholar)
    db_session.commit()
    result = db_session.query(Scholar).filter_by(aminer_id="A123").first()
    assert result is not None
    assert result.name == "张三"
    assert result.org == "清华大学"

def test_scholar_unique_constraint(db_session):
    """
    测试学者aminer_id唯一性约束。
    """
    scholar1 = Scholar(name="李四", org="北大", aminer_id="B456")
    scholar2 = Scholar(name="李四", org="北大", aminer_id="B456")
    db_session.add(scholar1)
    db_session.add(scholar2)
    with pytest.raises(IntegrityError):
        db_session.commit()

# ------------------ 论文/专利模型测试 ------------------
def test_create_paper_and_patent(db_session):
    """
    参考aminer/demo/paper.json和patents.json，测试论文和专利的所有字段存取。
    """
    # 先插入学者
    scholar = Scholar(name="喻纯", org="清华大学", aminer_id="56066a5245cedb339687488b")
    db_session.add(scholar)
    db_session.commit()
    # 论文真实案例
    paper_data = {
        "aminer_id": "682be5de163c01c850f6050e",
        "scholar_id": scholar.id,
        "title": "AR Secretary Agent: Real-time Memory Augmentation Via LLM-powered Augmented Reality Glasses",
        "abstract": "Interacting with a significant number of individuals on a daily basis is commonplace for many professionals, which can lead to challenges in recalling specific details: Who is this person? What did we talk about last time? The advant of augmented reality (AR) glasses, equipped with visual and auditory data capture capabilities, presents a solution. In our work, we implemented an AR Secretary Agent with advanced Large Language Models (LLMs) and Computer Vision technologies. This system could discreetly provide real-time information to the wearer, identifying who they are conversing with and summarizing previous discussions. To verify AR Secretary, we conducted a user study with 13 participants and showed that our technique can efficiently help users to memorize events by up to 20% memory enhancement on our study.",
        "authors": [
            {"name": "Raphaël A. El Haddad"},
            {"id": "6325a348f5ee9683ec776828", "name": "Zeyu Wang"},
            {"name": "Yeonsu Shin"},
            {"name": "Ranyi Liu"},
            {"id": "560cbb3845cedb33975687e5", "name": "Yuntao Wang"},
            {"id": "56066a5245cedb339687488b", "name": "Chun Yu"}
        ],
        "create_time": "2025-05-20T11:05:15.547Z",
        "lang": "en",
        "num_citation": 0,
        "pdf": "https://cz5waila03cyo0tux1owpyofgoryroob.aminer.cn/FA/95/A9/FA95A9183DA53A75353AB4FFD233C029.pdf",
        "urls": ["https://www.alphaxiv.org/abs/2505.11888"],
        "versions": [
            {"id": "687a326a163c01c850a6aef6", "sid": "2505.11888", "src": "alphaxiv", "year": 2025},
            {"id": "682be5de163c01c850f6050e", "sid": "2505.11888", "src": "arxiv", "year": 2025}
        ],
        "year": 2025,
        "update_times": {"u_a_t": "2025-07-22T17:43:43.092Z", "u_v_t": "2025-07-22T17:43:43.092Z"}
    }
    paper = Paper(**paper_data)
    # 专利真实案例
    patent_data = {
        "aminer_id": "67a734db9781ce1a6aa43660",
        "scholar_id": scholar.id,
        "title": {
            "en": [
                "Intelligent ring interaction method for use in intelligent wearing device i.e. intelligent hand ring, involves inputting touch gesture and touch sound generated by touch gesture into algorithm processing module, and identifying surface of object touched by finger by algorithm processing module."
            ],
            "zh": [
                "一种智能戒指交互方法、装置及电子设备"
            ]
        },
        "abstract": {
            "en": [
                "NOVELTY - The method involves obtaining (100) the touch                gesture executed by the finger through the inertial                measurement unit (IMU) sensor of the intelligent                ring. The touch sound generated is collected (101)                when the finger executes the touch gesture. The                touch gesture and the touch sound generated is                inputted (102) by the touch gesture into the                algorithm processing module, and the surface of the                object touched is identified by the finger by the                algorithm processing module.",
                "USE - Intelligent ring interaction method for use in                intelligent wearing device such as intelligent hand                ring and intelligent watch.",
                "ADVANTAGE - The method realizes active interaction with                the intelligent ring by using different gestures                and the sounds generated by touching different                object surfaces, and actively controls the                intelligent ring to selectively open and close each                human body detection function according to the                desire of the user by unit of active                interaction.",
                "DETAILED DESCRIPTION - INDEPENDENT CLAIMS are included for the                following:",
                "1. an intelligent ring interaction                device;",
                "2. an electronic device; and",
                "3. a computer-readable storage medium storing                program for interacting intelligent ring.",
                "DESCRIPTION OF DRAWING(S) - The drawing shows a flow diagram of an                intelligent ring interaction method. (Drawing                includes non-English language text)",
                "100Step for obtaining the touch gesture                executed by the finger through the IMU sensor of                the intelligent ring",
                "101Step for collecting the touch sound                generated when the finger executes the touch                gesture",
                "102Step for inputting the touch gesture and                the touch sound generated by the touch gesture into                the algorithm processing module"
            ],
            "zh": [
                "本发明提供了一种智能戒指交互方法、装置及电子设备，智能戒指穿戴于手指的食指上，所述智能戒指包括：IMU传感器、声音传感器和算法处理模块；所述方法，包括：通过所述智能戒指的IMU传感器获取所述手指执行的触碰手势；通过所述声音传感器采集所述手指执行所述触碰手势时发出的触碰声音；将所述触碰手势和所述触碰手势产生的所述触碰声音输入所述算法处理模块中，利用所述算法处理模块对所述手指触碰的物体表面进行识别。本发明利用不同手势与触碰不同物体表面发出的声音，可以实现与智能戒指的主动交互，通过主动交互的方式主动控制智能戒指根据用户意愿选择性启闭各项人体检测功能。"
            ]
        },
        "app_date": "2024-09-05T00:00:00Z",
        "app_num": "202411244374",
        "applicant": [
            {
                "addressInfo": {"raw": "100084 北京市海淀区清华园"},
                "name": "清华大学",
                "orgId": "5f71b2881c455f439fe3c860"
            }
        ],
        "assignee": [
            {
                "name": "UNIV TSINGHUA (UYQI-C)",
                "orgId": "5f71b2881c455f439fe3c860"
            }
        ],
        "country": "CN",
        "cpc": [],
        "inventor": [
            {"name": "史元春", "personId": "6501a7a121d92e25912f986a"},
            {"name": "喻纯", "personId": "56066a5245cedb339687488b"},
            {"name": "何哲"}
        ],
        "ipc": [
            {"l1": "G", "l2": "G06", "l3": "G06F", "l4": "G06F003/01"},
            {"l1": "G", "l2": "G06", "l3": "G06F", "l4": "G06F003/16"}
        ],
        "ipcr": [
            {"l1": "G", "l2": "G06", "l3": "G06F", "l4": "G06F3/01"},
            {"l1": "G", "l2": "G06", "l3": "G06F", "l4": "G06F3/16"}
        ],
        "pct": [],
        "priority": [{"num": "11244374"}],
        "pub_date": "2024-11-26T00:00:00Z",
        "pub_kind": "A",
        "pub_num": "119024969",
        "pub_search_id": "CN119024969A"
    }
    patent = Patent(**patent_data)
    db_session.add_all([paper, patent])
    db_session.commit()
    # 断言论文字段
    p = db_session.query(Paper).filter_by(aminer_id="682be5de163c01c850f6050e").first()
    assert p is not None
    assert p.title.startswith("AR Secretary Agent")
    assert p.authors[-1]["name"] == "Chun Yu"
    assert p.year == 2025
    assert p.lang == "en"
    assert p.num_citation == 0
    assert p.pdf.startswith("https://cz5waila03cyo0tux1owpyofgoryroob.aminer.cn/")
    assert p.urls[0].startswith("https://www.alphaxiv.org/")
    assert p.versions[0]["src"] == "alphaxiv"
    assert "u_a_t" in p.update_times
    # 断言专利字段
    pt = db_session.query(Patent).filter_by(aminer_id="67a734db9781ce1a6aa43660").first()
    assert pt is not None
    title_obj = pt.title
    assert "en" in title_obj and "zh" in title_obj
    assert pt.app_date == "2024-09-05T00:00:00Z"
    assert pt.app_num == "202411244374"
    assert pt.applicant[0]["name"] == "清华大学"
    assert pt.assignee[0]["name"].startswith("UNIV TSINGHUA")
    assert pt.country == "CN"
    assert isinstance(pt.cpc, list)
    assert pt.inventor[1]["name"] == "喻纯"
    assert pt.ipc[0]["l4"] == "G06F003/01"
    assert pt.ipcr[0]["l4"] == "G06F3/01"
    assert pt.pub_date == "2024-11-26T00:00:00Z"
    assert pt.pub_kind == "A"
    assert pt.pub_num == "119024969"
    assert pt.pub_search_id == "CN119024969A"

# ------------------ 同步日志测试 ------------------
def test_sync_log(db_session):
    """
    测试同步日志的写入和查询。
    """
    scholar = Scholar(name="赵六", org="上交", aminer_id="D000")
    db_session.add(scholar)
    db_session.commit()
    log = SyncLog(scholar_id=scholar.id, action="refresh", status="success", message="ok")
    db_session.add(log)
    db_session.commit()
    result = db_session.query(SyncLog).filter_by(scholar_id=scholar.id).first()
    assert result is not None
    assert result.action == "refresh"
    assert result.status == "success"

# ------------------ 异常与边界场景 ------------------
def test_invalid_scholar_id(db_session):
    """
    测试无效学者ID时的异常处理。
    """
    result = db_session.query(Scholar).filter_by(aminer_id="not_exist").first()
    assert result is None

def test_concurrent_sync(db_session):
    """
    测试并发同步时的乐观锁/时间戳冲突处理（占位，后续补充）。
    """
    pass 